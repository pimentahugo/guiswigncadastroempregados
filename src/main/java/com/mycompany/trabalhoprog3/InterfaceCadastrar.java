/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.trabalhoprog3;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AbstractDocument;

/**
 *
 * @author hugop
 */
public class InterfaceCadastrar extends javax.swing.JFrame {

    private ArrayList<Object> listaColaboradores;

    public InterfaceCadastrar(ArrayList<Object> listaColaboradores) {
        initComponents();
        this.listaColaboradores = listaColaboradores;
        inicializador();
    }

    public InterfaceCadastrar() {
        //listaColaboradores = new ArrayList<>();
        initComponents();
        inicializador();
    }

    public void inicializador() {
        ((AbstractDocument) bonusField.getDocument()).setDocumentFilter(new BaseDocumentFilter("[0-9.]*"));
        ((AbstractDocument) salarioField.getDocument()).setDocumentFilter(new BaseDocumentFilter("[0-9.]*"));
        ((AbstractDocument) bonusCoopField.getDocument()).setDocumentFilter(new BaseDocumentFilter("[0-9.]*"));
        setLocationRelativeTo(null);
        visibleFields(tipoColaboradorBox.getSelectedIndex());
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"Nome", "Tipo Colaborador", "Data Contratação", "Salário", "Turno", "Área Programação", "Bonus", "Bonus Cooparticipação"});
        jTable1.setModel(model);
        atualizarTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        nomeField = new javax.swing.JTextField();
        tipoColaboradorBox = new javax.swing.JComboBox<>();
        dataField = new javax.swing.JFormattedTextField();
        turnoField = new javax.swing.JComboBox<>();
        bonusField = new javax.swing.JTextField();
        areaProgField = new javax.swing.JTextField();
        bonusCoopField = new javax.swing.JTextField();
        cadastrarButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        nomeLabel = new javax.swing.JLabel();
        tipoLabel = new javax.swing.JLabel();
        salarioLabel = new javax.swing.JLabel();
        turnoLabel = new javax.swing.JLabel();
        dataLabel = new javax.swing.JLabel();
        bonusLabel = new javax.swing.JLabel();
        areaLabel = new javax.swing.JLabel();
        bonusCoopLabel = new javax.swing.JLabel();
        cadastrarButton1 = new javax.swing.JButton();
        salarioField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        excluirButton = new javax.swing.JButton();
        aumentarButton = new javax.swing.JButton();
        alterarBonusButton = new javax.swing.JButton();
        alterarBonusCoopButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Cadastro de colaborador");

        nomeField.setToolTipText("Nome do colaborador");

        tipoColaboradorBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escolha um tipo", "Empregado", "Gerente", "Executivo", "Secretario", "Programador" }));
        tipoColaboradorBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoColaboradorBoxActionPerformed(evt);
            }
        });

        try {
            dataField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        dataField.setToolTipText("");
        dataField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataFieldActionPerformed(evt);
            }
        });

        turnoField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione um turno", "Manha", "Tarde", "Noite" }));

        bonusField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bonusFieldActionPerformed(evt);
            }
        });

        cadastrarButton.setText("Cadastrar");
        cadastrarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastrarButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Voltar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        nomeLabel.setText("Nome do colaborador");

        tipoLabel.setText("Tipo de colaborador");

        salarioLabel.setText("Salário");

        turnoLabel.setText("Turno");

        dataLabel.setText("Data de contratação");

        bonusLabel.setText("Bônus");

        areaLabel.setText("Área de programação");

        bonusCoopLabel.setText("Bônus de coorpaticipação");

        cadastrarButton1.setText("Limpar");
        cadastrarButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastrarButton1ActionPerformed(evt);
            }
        });

        salarioField.setToolTipText("Nome do colaborador");
        salarioField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salarioFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nomeLabel)
                            .addComponent(tipoLabel)
                            .addComponent(salarioLabel)
                            .addComponent(dataLabel)
                            .addComponent(turnoLabel)
                            .addComponent(bonusLabel)
                            .addComponent(areaLabel)
                            .addComponent(bonusCoopLabel)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(cadastrarButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cadastrarButton))
                    .addComponent(nomeField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tipoColaboradorBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 221, Short.MAX_VALUE)
                    .addComponent(dataField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(turnoField, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bonusField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(areaProgField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bonusCoopField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(salarioField, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(32, 32, 32))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tipoColaboradorBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipoLabel))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salarioLabel)
                    .addComponent(salarioField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(turnoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(turnoLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bonusField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bonusLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(areaProgField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(areaLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bonusCoopField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bonusCoopLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cadastrarButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2)
                        .addComponent(cadastrarButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Colaboradores cadastrados");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Nome", "Data Contratação", "Salário", "Turno", "Área Programação", "Bonus", "Bonus Cooparticipação"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        excluirButton.setText("Excluir colaborador");
        excluirButton.setToolTipText("");
        excluirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirButtonActionPerformed(evt);
            }
        });

        aumentarButton.setText("Aumentar salario");
        aumentarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aumentarButtonActionPerformed(evt);
            }
        });

        alterarBonusButton.setText("Alterar bônus");
        alterarBonusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarBonusButtonActionPerformed(evt);
            }
        });

        alterarBonusCoopButton.setText("Alterar bônus de coop.");
        alterarBonusCoopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarBonusCoopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(252, 252, 252)
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 741, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addComponent(excluirButton)
                        .addGap(18, 18, 18)
                        .addComponent(aumentarButton)
                        .addGap(18, 18, 18)
                        .addComponent(alterarBonusButton)
                        .addGap(18, 18, 18)
                        .addComponent(alterarBonusCoopButton)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(excluirButton)
                    .addComponent(aumentarButton)
                    .addComponent(alterarBonusButton)
                    .addComponent(alterarBonusCoopButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dataFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataFieldActionPerformed

    }//GEN-LAST:event_dataFieldActionPerformed

    private void bonusFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bonusFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bonusFieldActionPerformed

    private void cadastrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastrarButtonActionPerformed
        if (!verificarCampos(tipoColaboradorBox.getSelectedIndex())) {
            cadastrarColaborador();
            limparCampos();
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, preencha todos os campos antes de cadastrar.");
        }
    }//GEN-LAST:event_cadastrarButtonActionPerformed

    private void tipoColaboradorBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoColaboradorBoxActionPerformed
        visibleFields(tipoColaboradorBox.getSelectedIndex());
    }//GEN-LAST:event_tipoColaboradorBoxActionPerformed

    private void cadastrarButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastrarButton1ActionPerformed
        limparCampos();
    }//GEN-LAST:event_cadastrarButton1ActionPerformed

    private void salarioFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salarioFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_salarioFieldActionPerformed

    private void excluirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirButtonActionPerformed
        try {
            int linhaSelecionada = jTable1.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

            if (linhaSelecionada != -1) {
                String nomeColaborador = (String) model.getValueAt(linhaSelecionada, 0); // Assume que o nome está na coluna 1
                int opcaoSelecionada = JOptionPane.showConfirmDialog(this, "Você deseja excluir o colaborador " + nomeColaborador + "?", "Confirmação", JOptionPane.YES_NO_OPTION);
                if (opcaoSelecionada == JOptionPane.YES_OPTION) {
                    model.removeRow(linhaSelecionada);
                    listaColaboradores.remove(linhaSelecionada);
                    JOptionPane.showMessageDialog(null, "Colaborador excluído com sucesso.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Selecione uma linha para excluir.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao excluir colaborador: " + e.getMessage());
        }
    }//GEN-LAST:event_excluirButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        fecharJanela();
    }

    private void fecharJanela() {
        this.dispose();
        // Atualize a listaColaboradores na TrabalhoProg3
        if (getParent() instanceof TrabalhoProg3) {
            TrabalhoProg3 interfacePrincipal = (TrabalhoProg3) getParent();
            interfacePrincipal.setListaColaboradores(listaColaboradores);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void aumentarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aumentarButtonActionPerformed
        try {
            int linhaSelecionada = jTable1.getSelectedRow();
            if (linhaSelecionada != -1) {
                double aumento = Double.parseDouble(JOptionPane.showInputDialog(null, "Informe a porcentagem de aumento ao colaborador"));
                if (aumento > 0) {
                    Empregado empregadoSelecionado = (Empregado) listaColaboradores.get(linhaSelecionada);
                    empregadoSelecionado.aumentoSalarial(aumento);
                    JOptionPane.showMessageDialog(null, "Salario do colaborador " + empregadoSelecionado.getNome() + " aumentado com sucesso.");
                    atualizarTabela();
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, informe um valor de aumento maior que 0.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, verifique se o colaborador está selecionado na tabela.");
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao efetuar o aumento salarial: " + e.getMessage());
        }
    }//GEN-LAST:event_aumentarButtonActionPerformed

    private void alterarBonusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterarBonusButtonActionPerformed
        try {
            int linhaSelecionada = jTable1.getSelectedRow();
            if (linhaSelecionada != -1) {
                String valorColuna = String.valueOf(jTable1.getValueAt(linhaSelecionada, 1));
                if ("Gerente".equals(valorColuna) || "Executivo".equals(valorColuna)) {
                    double bonus = Double.parseDouble(JOptionPane.showInputDialog(null, "Informe o novo bonus do colaborador"));
                    if (bonus > 0) {
                        Gerente gerente = (Gerente) listaColaboradores.get(linhaSelecionada);
                        gerente.setBonus(bonus);
                        JOptionPane.showMessageDialog(null, "Bônus do colaborador " + gerente.getNome() + " alterado com sucesso.");
                        atualizarTabela();
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, informe um valor de aumento maior que 0.");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, selecione um colaborador do tipo Gerente ou Executivo.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, verifique se o colaborador está selecionado na tabela.");
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao efetuar a alteração do bonus salarial: " + e.getMessage());
        }
    }//GEN-LAST:event_alterarBonusButtonActionPerformed

    private void alterarBonusCoopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterarBonusCoopButtonActionPerformed
        try {
            int linhaSelecionada = jTable1.getSelectedRow();
            if (linhaSelecionada != -1) {
                String valorColuna = String.valueOf(jTable1.getValueAt(linhaSelecionada, 1));
                if ("Executivo".equals(valorColuna)) {
                    double bonus = Double.parseDouble(JOptionPane.showInputDialog(null, "Informe o novo bonus do colaborador"));
                    if (bonus > 0) {
                        Executivo executivo = (Executivo) listaColaboradores.get(linhaSelecionada);
                        executivo.setBonusCooparticipacao(bonus);
                        JOptionPane.showMessageDialog(null, "Bônus do colaborador " + executivo.getNome() + " alterado com sucesso.");
                        atualizarTabela();
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, informe um valor de aumento maior que 0.");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, selecione um colaborador do tipo Executivo.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, verifique se o colaborador está selecionado na tabela.");
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao efetuar a alteração do bonus salarial: " + e.getMessage());
        }
    }//GEN-LAST:event_alterarBonusCoopButtonActionPerformed

    public void visibleFields(int t) {
        switch (t) {
            case 1 -> { //Empregado
                //Campos
                nomeField.setVisible(true);
                dataField.setVisible(true);
                salarioField.setVisible(true);
                areaProgField.setVisible(false);
                bonusField.setVisible(false);
                turnoField.setVisible(false);
                bonusCoopField.setVisible(false);

                //Labels
                nomeLabel.setVisible(true);
                dataLabel.setVisible(true);
                salarioLabel.setVisible(true);
                areaLabel.setVisible(false);
                bonusCoopLabel.setVisible(false);
                turnoLabel.setVisible(false);
                bonusLabel.setVisible(false);
            }
            case 2 -> { //Gerente
                nomeField.setVisible(true);
                dataField.setVisible(true);
                salarioField.setVisible(true);
                areaProgField.setVisible(false);
                bonusField.setVisible(false);
                turnoField.setVisible(false);
                bonusCoopField.setVisible(false);

                //Labels
                nomeLabel.setVisible(true);
                dataLabel.setVisible(true);
                salarioLabel.setVisible(true);
                areaLabel.setVisible(false);
                bonusCoopLabel.setVisible(false);
                turnoLabel.setVisible(false);
                bonusLabel.setVisible(false);
            }
            case 3 -> { //Executivo
                nomeField.setVisible(true);
                dataField.setVisible(true);
                salarioField.setVisible(true);
                areaProgField.setVisible(false);
                bonusField.setVisible(false);
                turnoField.setVisible(false);
                bonusCoopField.setVisible(false);

                //Labels
                nomeLabel.setVisible(true);
                dataLabel.setVisible(true);
                salarioLabel.setVisible(true);
                areaLabel.setVisible(false);
                bonusCoopLabel.setVisible(false);
                turnoLabel.setVisible(false);
                bonusLabel.setVisible(false);
            }
            case 4 -> { //Secretario
                nomeField.setVisible(true);
                dataField.setVisible(true);
                salarioField.setVisible(true);
                areaProgField.setVisible(false);
                bonusField.setVisible(false);
                turnoField.setVisible(true);
                bonusCoopField.setVisible(false);

                //Labels
                nomeLabel.setVisible(true);
                dataLabel.setVisible(true);
                salarioLabel.setVisible(true);
                areaLabel.setVisible(false);
                bonusCoopLabel.setVisible(false);
                turnoLabel.setVisible(true);
                bonusLabel.setVisible(false);
            }
            case 5 -> { //Programador
                nomeField.setVisible(true);
                dataField.setVisible(true);
                salarioField.setVisible(true);
                areaProgField.setVisible(true);
                bonusField.setVisible(false);
                turnoField.setVisible(false);
                bonusCoopField.setVisible(false);
                //Labels
                nomeLabel.setVisible(true);
                dataLabel.setVisible(true);
                salarioLabel.setVisible(true);
                areaLabel.setVisible(true);
                bonusCoopLabel.setVisible(false);
                turnoLabel.setVisible(false);
                bonusLabel.setVisible(false);
            }
            default -> {
                nomeField.setVisible(false);
                dataField.setVisible(false);
                salarioField.setVisible(false);
                areaProgField.setVisible(false);
                bonusField.setVisible(false);
                turnoField.setVisible(false);
                bonusCoopField.setVisible(false);

                //Labels
                nomeLabel.setVisible(false);
                dataLabel.setVisible(false);
                salarioLabel.setVisible(false);
                areaLabel.setVisible(false);
                bonusCoopLabel.setVisible(false);
                turnoLabel.setVisible(false);
                bonusLabel.setVisible(false);
            }
        }
    }

    private boolean verificarCampos(int comboBoxSelected) {
        String nome = nomeField.getText();
        String data = dataField.getText();
        String salario = salarioField.getText();
        String area = areaProgField.getText();
        String bonus = bonusField.getText();
        int turno = turnoField.getSelectedIndex();
        String bonusCoop = bonusCoopField.getText();

        switch (comboBoxSelected) {
            case 1: //Empregado
                if (nome.isEmpty() || data.isEmpty() || salario.isEmpty()) {
                    return true;
                } else {
                    return false;
                }
            case 2: //Gerente
                //if (nome.isEmpty() || data.isEmpty() || salario.isEmpty() || bonus.isEmpty()) {
                if (nome.isEmpty() || data.isEmpty() || salario.isEmpty()) {
                    return true;
                } else {
                    return false;
                }
            case 3: //Executivo
                //if (nome.isEmpty() || data.isEmpty() || salario.isEmpty() || bonusCoop.isEmpty()) {
                if (nome.isEmpty() || data.isEmpty() || salario.isEmpty()) {
                    return true;
                } else {
                    return false;
                }
            case 4: // Secretario
                if (nome.isEmpty() || data.isEmpty() || salario.isEmpty() || turno == 0) {
                    return true;
                } else {
                    return false;
                }
            case 5: // Programador
                if (nome.isEmpty() || data.isEmpty() || salario.isEmpty() || area.isEmpty()) {
                    return true;
                } else {
                    return false;
                }
            default:
                return true;
        }
    }

    private void cadastrarColaborador() {
        try {
            String nome = nomeField.getText();
            Double salario = Double.parseDouble(salarioField.getText());
            String area = areaProgField.getText();
            int turno = turnoField.getSelectedIndex();

            String dataString = dataField.getText();
            DateTimeFormatter formatoData = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            LocalDate localDate = LocalDate.parse(dataString, formatoData);
            Date dataConvertida = java.sql.Date.valueOf(localDate);

            Double bonus = bonusField.getText().isEmpty() ? 0 : Double.parseDouble(bonusField.getText());
            Double bonusCoop = bonusCoopField.getText().isEmpty() ? 0 : Double.parseDouble(bonusCoopField.getText());

            switch (tipoColaboradorBox.getSelectedIndex()) {
                case 1: // Empregado
                    Empregado empregado = new Empregado(nome, salario, dataConvertida);
                    listaColaboradores.add(empregado);
                    break;
                case 2: // Gerente
                    //Gerente gerente = new Gerente(nome, salario, dataConvertida, bonus);
                    Gerente gerente = new Gerente(nome, salario, dataConvertida);
                    listaColaboradores.add(gerente);
                    break;
                case 3: // Executivo
                    //Executivo executivo = new Executivo(nome, salario, dataConvertida, bonus, bonusCoop);
                    Executivo executivo = new Executivo(nome, salario, dataConvertida);
                    listaColaboradores.add(executivo);
                    break;
                case 5: // Programador
                    Programador programador = new Programador(nome, salario, dataConvertida, area);
                    listaColaboradores.add(programador);
                    break;
                case 4: // Secretario
                    Secretario secretario = new Secretario(nome, salario, dataConvertida, turno);
                    listaColaboradores.add(secretario);
                    break;
                // Adicione casos para outros tipos de colaboradores
            }

            // Atualize a tabela
            atualizarTabela();
            JOptionPane.showMessageDialog(null, "Colaborador cadastrado com sucesso.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao cadastrar: " + e.getMessage());
        }
    }

    private void limparCampos() {
        nomeField.setText("");
        dataField.setText("");
        salarioField.setText("");
        areaProgField.setText("");
        bonusField.setText("");
        turnoField.setSelectedIndex(0);
        bonusCoopField.setText("");
    }

    private void atualizarTabela() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        for (Object colaborador : listaColaboradores) {
            String tipoColaborador = "Desconhecido"; // Valor padrão, caso não seja nenhum tipo conhecido

            if (colaborador instanceof Executivo) {
                tipoColaborador = "Executivo";
            } else if (colaborador instanceof Gerente) {
                tipoColaborador = "Gerente";
            } else if (colaborador instanceof Programador) {
                tipoColaborador = "Programador";
            } else if (colaborador instanceof Secretario) {
                tipoColaborador = "Secretario";
            } else if (colaborador instanceof Empregado) {
                tipoColaborador = "Empregado";
            }
            if (colaborador instanceof Executivo) {
                Executivo executivo = (Executivo) colaborador;
                model.addRow(new Object[]{
                    executivo.getNome(),
                    tipoColaborador,
                    executivo.getDataContracao(),
                    executivo.getSalario(),
                    null,
                    null,
                    executivo.getBonus(),
                    executivo.getBonusCoop()
                });
            } else if (colaborador instanceof Gerente) {
                Gerente gerente = (Gerente) colaborador;
                model.addRow(new Object[]{
                    gerente.getNome(),
                    tipoColaborador,
                    gerente.getDataContracao(),
                    gerente.getSalario(),
                    null,
                    null,
                    gerente.getBonus(),
                    null
                });
            } else if (colaborador instanceof Programador) {
                Programador programador = (Programador) colaborador;
                model.addRow(new Object[]{
                    programador.getNome(),
                    tipoColaborador,
                    programador.getDataContracao(),
                    programador.getSalario(),
                    null,
                    programador.getAreaProg(),
                    null,
                    null,});
            } else if (colaborador instanceof Secretario) {
                Secretario secretario = (Secretario) colaborador;
                model.addRow(new Object[]{
                    secretario.getNome(),
                    tipoColaborador,
                    secretario.getDataContracao(),
                    secretario.getSalario(),
                    secretario.getTurnoString(),
                    null,
                    null,
                    null
                });
            } else if (colaborador instanceof Empregado) {
                Empregado empregado = (Empregado) colaborador;
                model.addRow(new Object[]{
                    empregado.getNome(),
                    tipoColaborador,
                    empregado.getDataContracao(),
                    empregado.getSalario(),
                    null,
                    null,
                    null,
                    null
                });
            }
        }

        String[] columnNames = {"Nome", "Tipo Colaborador", "Data Contratação", "Salário", "Turno", "Área Programação", "Bonus", "Bonus Cooparticipação"};
        model.setColumnIdentifiers(columnNames);
    }

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(InterfaceCadastrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(InterfaceCadastrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(InterfaceCadastrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(InterfaceCadastrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new InterfaceCadastrar().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton alterarBonusButton;
    private javax.swing.JButton alterarBonusCoopButton;
    private javax.swing.JLabel areaLabel;
    private javax.swing.JTextField areaProgField;
    private javax.swing.JButton aumentarButton;
    private javax.swing.JTextField bonusCoopField;
    private javax.swing.JLabel bonusCoopLabel;
    private javax.swing.JTextField bonusField;
    private javax.swing.JLabel bonusLabel;
    private javax.swing.JButton cadastrarButton;
    private javax.swing.JButton cadastrarButton1;
    private javax.swing.JFormattedTextField dataField;
    private javax.swing.JLabel dataLabel;
    private javax.swing.JButton excluirButton;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField nomeField;
    private javax.swing.JLabel nomeLabel;
    private javax.swing.JTextField salarioField;
    private javax.swing.JLabel salarioLabel;
    private javax.swing.JComboBox<String> tipoColaboradorBox;
    private javax.swing.JLabel tipoLabel;
    private javax.swing.JComboBox<String> turnoField;
    private javax.swing.JLabel turnoLabel;
    // End of variables declaration//GEN-END:variables
}
